#include <cstdio>
#include <cmath>
#include <cstring>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <utility>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>

// #pragma comment(linker, "/STACK:16777216")

using namespace std;

typedef long long ll;
typedef vector<int> vecint;
typedef pair<int, int> ppi;
typedef vector< pair<int, int> > vecppi;

#define fill(a,x) memset(a, (x), sizeof(a))
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)

int read() {   int x;   scanf("%d",&x);   return x;   }
int read(int &x) {  scanf("%d",&x);     return x;   }


const int MAX_N = 55;
const int MAX_CHARGES = 1003;
const ll oo = 2*ll(1e18);


ll f[MAX_N][MAX_CHARGES];
vector<pair<ll, int> > e[MAX_N];


void update(int u, int charge, ll newCost) {
	if (newCost >= f[u][charge])
		return;
	f[u][charge] = newCost;
}


class NegativeGraphDiv2 {
public:
	long long findMin(int n, vector <int> s, vector <int> t, vector <int> weight, int charges) {
		// init;
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j <= charges; ++j)
				f[i][j] = oo;
			e[i].clear();
		}

		ll maxW = -oo;
		for (int i = 0, m = s.size(); i < m; ++i) {
			int x = s[i], y = t[i], w = weight[i];
			--x;	--y;
			e[x].push_back(make_pair(w, y));
			maxW = max(maxW, ll(w));
		}
		// dp
		ll ans = oo;
		f[0][charges] = 0;
		for (int ch = charges; ch >= 0; --ch) {
			// floyd
			for (int turn = 0; turn < n; ++turn)
				for (int u = 0; u < n; ++u) {
					ll cost = f[u][ch];
					for (int i = 0, sz = e[u].size(); i < sz; ++i) {
						int v = e[u][i].second;
						update(v, ch, cost + e[u][i].first);
						if (ch)
							update(v, ch-1, cost - e[u][i].first);
					}
				}
			ans = min(ans, f[n-1][ch]);
		}
		return ans;
	}

// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); if ((Case == -1) || (Case == 4)) test_case_4();}
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const long long &Expected, const long long &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { int Arg0 = 3; int Arr1[] = {1,1,2,2,3,3}; vector <int> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); int Arr2[] = {2,3,1,3,1,2}; vector <int> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); int Arr3[] = {1,5,1,10,1,1}; vector <int> Arg3(Arr3, Arr3 + (sizeof(Arr3) / sizeof(Arr3[0]))); int Arg4 = 1; long long Arg5 = -9LL; verify_case(0, Arg5, findMin(Arg0, Arg1, Arg2, Arg3, Arg4)); }
	void test_case_1() { int Arg0 = 1; int Arr1[] = {1}; vector <int> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); int Arr2[] = {1}; vector <int> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); int Arr3[] = {100}; vector <int> Arg3(Arr3, Arr3 + (sizeof(Arr3) / sizeof(Arr3[0]))); int Arg4 = 1000; long long Arg5 = -100000LL; verify_case(1, Arg5, findMin(Arg0, Arg1, Arg2, Arg3, Arg4)); }
	void test_case_2() { int Arg0 = 2; int Arr1[] = {1,1,2}; vector <int> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); int Arr2[] = {2,2,1}; vector <int> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); int Arr3[] = {6,1,4}; vector <int> Arg3(Arr3, Arr3 + (sizeof(Arr3) / sizeof(Arr3[0]))); int Arg4 = 2; long long Arg5 = -9LL; verify_case(2, Arg5, findMin(Arg0, Arg1, Arg2, Arg3, Arg4)); }
	void test_case_3() { int Arg0 = 2; int Arr1[] = {1}; vector <int> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); int Arr2[] = {2}; vector <int> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); int Arr3[] = {98765}; vector <int> Arg3(Arr3, Arr3 + (sizeof(Arr3) / sizeof(Arr3[0]))); int Arg4 = 100; long long Arg5 = -98765LL; verify_case(3, Arg5, findMin(Arg0, Arg1, Arg2, Arg3, Arg4)); }
	void test_case_4() { int Arg0 = 25; int Arr1[] = {13, 15, 18, 14, 14, 25, 10, 7, 1, 25, 24, 4, 12, 12, 10, 5, 6, 2, 8, 24, 21, 4, 18, 25, 1, 19, 17, 2, 3, 25, 4, 22, 13, 10, 2, 17, 8, 23, 25, 14, 8, 1, 10, 23, 2, 23, 17, 12, 10, 7, 1, 11, 2, 15, 15, 23, 15, 20, 14, 11, 24, 4, 12, 2, 22, 12, 8, 8, 21, 2, 4, 7, 15, 25, 19, 7, 6, 7, 22, 18, 4, 22, 15, 20, 1, 21, 24, 22, 3, 2, 17, 24, 24, 24, 21, 15, 21, 20, 13, 5, 9, 11, 19, 23, 13, 21, 17, 19, 6, 9, 12, 8, 15, 4, 5, 7, 16, 12, 19, 18, 16, 20, 8, 17, 19, 9, 25, 25, 13, 18, 21, 24, 15, 23, 13, 24, 16, 14, 18, 5, 6, 7, 15, 5, 1, 14, 5, 16, 3, 21, 21, 23, 4, 16, 8, 10, 1, 4, 20, 21, 4, 13, 10, 10, 12, 23, 1, 1, 4, 23, 2, 22, 9, 7, 12, 21, 5, 14, 8, 19, 4, 20, 2, 11, 12, 17, 17, 14, 21, 17, 16, 20, 12, 13, 13, 9, 14, 13, 13, 21, 18, 18, 8, 15, 21, 24, 19, 11, 23, 15, 21, 7, 2, 22, 9, 4, 6, 8, 13, 16, 21, 8, 25, 25, 8, 5, 5, 7, 8, 15, 1, 19, 23, 20, 9, 9, 17, 13, 14, 11, 20, 15, 8, 14, 18, 17, 24, 7, 12, 1, 3, 16, 1, 15, 12, 15, 16, 20, 19, 13, 2, 11, 6, 5, 14, 21, 19, 12, 12, 5, 7, 3, 11, 11, 11, 1, 20, 14, 3, 25, 2, 22, 10, 25, 19, 7, 23, 12, 19, 21, 21, 18, 18, 9, 18, 21, 14, 22, 5, 7, 5, 5, 24, 17, 18, 23, 20, 16, 18, 10, 24, 22, 18, 7, 12, 11, 16, 22, 20, 17, 14, 9, 14, 6, 5, 20, 8, 11, 22, 16, 5, 12, 18, 22, 25, 7, 3, 19, 16, 12, 1, 19, 14, 17, 23, 9, 15, 13, 2, 4, 23, 6, 13, 21, 25, 4, 14, 15, 4, 14, 20, 14, 8, 9, 6, 18, 15, 18, 21, 23, 1, 22, 21, 7, 5, 4, 15, 7, 8, 23, 24, 12, 10, 7, 9, 24, 21, 12, 6, 10, 6, 22, 9, 9, 3, 19, 1, 8, 5, 25, 18, 8, 1, 17, 1, 10, 4, 21, 10, 24, 20, 13, 13, 11, 16, 10, 6, 2, 9, 5, 11, 13, 25, 9, 4, 2, 23, 14, 14, 21, 11, 6, 13, 16, 13, 16, 21, 1, 12, 20, 20, 22, 10, 3, 12, 22, 24, 2, 10, 9, 17, 5, 23, 21, 14, 5, 9, 19, 14, 9, 15, 6, 23, 25, 12, 9, 15, 4, 16, 21, 25, 6, 5, 8, 20, 5, 10, 25, 4, 21, 17, 1, 2, 1, 20, 4, 18, 8, 20, 25, 5, 11, 25, 17, 20, 17, 7, 4, 5, 10, 6, 14, 22, 19, 4, 18, 20, 21, 11, 23, 10, 21, 11, 15, 21, 23, 25, 16, 12, 2, 18, 7, 18, 24, 5, 22, 3, 5, 20, 12, 22, 9, 25, 19, 1, 8, 4, 10, 25, 6, 6, 7, 12, 20, 20, 23, 1, 6, 13, 12, 23, 23, 9, 23, 8, 4, 12, 2, 20, 25, 20, 10, 23, 10, 11, 10, 1, 2, 10, 11, 8, 2, 23, 3, 4, 24, 3, 21, 23, 3, 5, 3, 25, 20, 22, 1, 2, 9, 2, 2, 9, 7, 2, 20, 15, 3, 8, 8, 9, 19, 24, 19, 21, 10, 19, 7, 23, 12, 14, 18, 6, 6, 20, 10, 21, 11, 21, 21, 3, 16, 19, 11, 15, 9, 16, 12, 18, 3, 9, 10, 11, 5, 2, 18, 25, 17, 13, 16, 17, 1, 2, 15, 24, 1, 1, 22, 7, 22, 10, 3, 20, 5, 17, 7, 19, 10, 13, 25, 16, 10, 23, 8, 15, 1, 24, 15, 24, 2, 17, 21, 7, 15, 17, 7, 4, 25, 5, 24, 12, 17, 9, 3, 6, 13, 7, 23, 18, 11, 5, 12, 3, 22, 8, 7, 17, 20, 10, 13, 6, 25, 6, 8, 14, 15, 17, 22, 10, 6, 18, 14, 2, 16, 24, 12, 2, 9, 16, 22, 16, 14, 3, 15, 19, 23, 23, 6, 8, 3, 2, 18, 15, 24, 11, 13, 9, 2, 15, 11, 25, 13, 5, 12, 5, 14, 4, 15, 14, 12, 25, 12, 14, 9, 13, 24, 14, 13, 25, 7, 2, 8, 24, 22, 6, 11, 7, 1, 2, 13, 22, 4, 20, 3, 20, 24, 2, 17, 4, 3, 14, 21, 12, 1, 18, 14, 10, 19, 18, 14, 5, 6, 7, 25, 17, 21, 2, 13, 8, 20, 4, 12, 6, 3, 3, 12, 8, 11, 19, 16, 5, 18, 11, 1, 7, 1, 14, 2, 24, 15, 17, 1, 3, 14, 18, 10, 19, 10, 10, 1, 1, 12, 10, 19, 25, 12, 25, 14, 7, 10, 3, 16, 12, 4, 14, 1, 17, 24, 12, 4, 4, 15, 15, 3, 2, 11, 20, 7, 9, 14, 22, 18, 25, 4, 10, 18, 22, 11, 11, 21, 17, 21, 24, 21, 8, 15, 7, 25, 19, 15, 14, 24, 10, 17, 18, 23, 9, 5, 24, 18, 24, 24, 13, 2, 19, 11, 24, 22, 19, 19, 11, 11, 7, 14, 17, 20, 22, 25, 10, 13, 4, 21, 14, 1, 16, 6, 9, 22, 9, 22, 3, 19, 20, 12, 6, 15, 14, 7, 17, 17, 25, 16, 15, 11, 3, 1, 20, 20, 19, 2, 14, 3, 2, 5, 8, 13, 18, 24, 20, 2, 6, 6, 19, 11, 18, 2, 8, 16, 14, 22, 22, 16, 21, 13, 15, 10, 25, 14, 3, 13, 24, 7, 24, 17, 13, 3, 2, 4, 24, 22, 22, 4, 23, 17, 20, 2, 14, 5, 10, 20, 7, 22, 22, 18, 2, 11, 11, 12, 20, 3, 21, 19, 6, 24, 12, 16, 21, 3, 15, 23, 21, 19, 8, 4, 23, 20, 2, 21, 2, 22, 15, 7, 3, 22, 6, 17, 25, 9, 8, 8, 10, 7, 3, 23, 13, 2, 20, 2, 15, 12, 23, 13, 7, 20, 15, 23, 22, 1, 23, 8, 1, 16, 22, 3, 11, 25, 15, 7, 14, 24, 9, 10, 8, 18, 16, 23, 17, 22, 2, 1, 10, 24, 20, 13, 15, 6, 5, 9, 1, 8, 1, 21, 19, 6, 18, 15, 15, 24, 10, 24, 20, 18, 1, 20, 6, 7, 22, 12, 13, 25, 14, 9, 10, 24, 3, 13, 12, 17, 16, 10, 5, 11, 14, 13, 8, 23, 23, 6, 8, 3, 10, 13, 14, 23, 13, 1, 5, 6, 1, 6, 2, 15, 17, 11, 17, 18, 24, 14, 11, 7, 10, 12, 9, 15, 4, 20, 21, 20, 2, 23, 16, 6, 14, 23, 21, 20, 20, 5, 24, 20, 25, 3, 24, 12, 23, 2, 18, 15, 16, 13, 15, 2, 4, 9, 17, 13, 4, 14, 25, 18, 1, 1, 12, 6, 21, 16, 1, 17, 8}; vector <int> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); int Arr2[] = {20, 9, 25, 12, 16, 14, 13, 2, 8, 9, 2, 9, 13, 22, 6, 20, 15, 9, 13, 2, 5, 21, 21, 17, 2, 12, 11, 11, 2, 10, 7, 18, 10, 24, 14, 19, 23, 9, 24, 11, 11, 7, 22, 21, 16, 20, 8, 21, 23, 1, 17, 9, 12, 19, 25, 14, 16, 18, 19, 21, 22, 21, 24, 5, 5, 5, 17, 20, 20, 5, 7, 9, 19, 19, 9, 5, 15, 23, 23, 4, 7, 17, 12, 8, 16, 24, 11, 23, 7, 14, 18, 1, 19, 8, 16, 17, 22, 12, 5, 23, 7, 1, 5, 9, 25, 4, 5, 12, 4, 18, 8, 3, 20, 23, 23, 19, 24, 16, 19, 16, 20, 6, 11, 3, 21, 13, 8, 3, 18, 18, 20, 5, 10, 9, 16, 20, 4, 4, 15, 17, 6, 20, 17, 25, 16, 16, 2, 8, 22, 5, 7, 20, 14, 3, 5, 8, 17, 13, 4, 2, 9, 10, 2, 4, 14, 20, 25, 24, 7, 17, 10, 24, 15, 23, 9, 19, 12, 9, 4, 23, 8, 20, 15, 21, 10, 11, 15, 11, 17, 24, 13, 12, 12, 7, 3, 8, 22, 23, 14, 20, 6, 23, 15, 20, 2, 16, 6, 5, 21, 24, 20, 25, 9, 5, 19, 17, 17, 16, 2, 3, 19, 20, 17, 2, 5, 25, 19, 10, 25, 9, 21, 17, 4, 17, 20, 17, 9, 16, 7, 11, 7, 10, 3, 10, 21, 2, 1, 5, 16, 22, 18, 17, 8, 18, 11, 25, 9, 6, 16, 13, 23, 25, 16, 14, 22, 2, 5, 1, 5, 18, 18, 12, 24, 4, 5, 23, 18, 13, 1, 23, 1, 16, 3, 2, 5, 12, 8, 8, 9, 25, 2, 21, 7, 16, 4, 4, 14, 5, 18, 5, 13, 25, 23, 24, 9, 8, 19, 25, 5, 12, 20, 24, 1, 18, 20, 5, 5, 20, 19, 4, 21, 24, 14, 8, 19, 19, 4, 16, 20, 10, 9, 22, 23, 2, 1, 15, 11, 12, 3, 15, 11, 23, 7, 5, 7, 12, 15, 5, 20, 4, 16, 25, 4, 13, 4, 16, 22, 12, 18, 10, 23, 11, 18, 17, 15, 23, 10, 8, 24, 11, 7, 7, 7, 20, 2, 21, 6, 7, 14, 10, 21, 10, 4, 5, 13, 13, 9, 18, 23, 1, 25, 3, 7, 4, 4, 2, 5, 12, 17, 25, 21, 13, 16, 21, 10, 18, 13, 23, 23, 5, 17, 2, 21, 17, 18, 16, 21, 20, 8, 1, 25, 8, 10, 5, 2, 10, 15, 8, 4, 24, 25, 8, 4, 22, 7, 19, 15, 13, 17, 12, 14, 1, 11, 22, 9, 20, 8, 21, 17, 14, 24, 15, 18, 14, 23, 2, 12, 24, 2, 24, 7, 5, 3, 22, 5, 6, 9, 5, 10, 3, 25, 12, 22, 10, 4, 5, 13, 19, 3, 2, 5, 4, 13, 20, 21, 11, 15, 10, 16, 24, 9, 11, 9, 4, 12, 17, 14, 16, 20, 6, 24, 21, 24, 15, 11, 10, 19, 24, 3, 8, 2, 5, 24, 5, 17, 22, 1, 11, 14, 21, 8, 12, 21, 22, 8, 23, 16, 17, 22, 20, 8, 4, 23, 17, 1, 15, 4, 3, 21, 12, 13, 2, 5, 25, 3, 19, 4, 11, 10, 10, 25, 12, 15, 11, 14, 5, 12, 20, 24, 15, 15, 6, 13, 5, 2, 5, 25, 15, 6, 18, 20, 21, 8, 21, 15, 12, 22, 23, 12, 4, 17, 6, 14, 9, 23, 14, 19, 12, 25, 15, 14, 8, 25, 7, 7, 14, 15, 7, 8, 21, 8, 14, 12, 7, 18, 24, 3, 3, 4, 13, 7, 21, 1, 4, 24, 12, 3, 20, 7, 14, 17, 9, 7, 24, 11, 15, 17, 6, 5, 10, 20, 17, 19, 20, 21, 1, 15, 2, 6, 5, 11, 5, 3, 19, 2, 18, 18, 15, 4, 21, 16, 24, 25, 5, 8, 18, 2, 17, 16, 23, 22, 1, 20, 18, 6, 1, 24, 4, 17, 6, 22, 19, 4, 20, 16, 5, 25, 18, 10, 19, 20, 2, 3, 22, 9, 9, 18, 17, 10, 23, 8, 6, 13, 9, 4, 7, 18, 3, 8, 21, 17, 2, 22, 11, 20, 16, 22, 6, 1, 18, 23, 19, 12, 16, 1, 16, 18, 17, 13, 24, 15, 15, 13, 22, 11, 3, 23, 4, 13, 18, 9, 22, 7, 5, 10, 24, 23, 12, 21, 19, 3, 4, 1, 2, 15, 16, 11, 5, 1, 2, 12, 3, 15, 13, 8, 18, 2, 22, 23, 12, 15, 11, 25, 10, 20, 4, 22, 9, 19, 13, 4, 19, 24, 22, 10, 20, 4, 22, 3, 3, 20, 16, 2, 18, 18, 8, 1, 8, 3, 11, 19, 22, 6, 17, 24, 21, 10, 7, 19, 25, 17, 15, 10, 23, 5, 9, 10, 1, 5, 17, 12, 14, 18, 13, 13, 8, 12, 18, 13, 11, 25, 14, 2, 3, 23, 16, 20, 6, 12, 23, 5, 10, 9, 22, 5, 8, 20, 19, 18, 15, 4, 22, 1, 17, 19, 10, 8, 14, 17, 8, 8, 1, 5, 20, 24, 16, 10, 11, 12, 15, 8, 25, 4, 16, 18, 10, 22, 14, 22, 22, 22, 13, 19, 7, 5, 8, 13, 5, 19, 13, 14, 12, 18, 10, 9, 17, 18, 13, 3, 18, 4, 17, 24, 20, 14, 18, 14, 7, 7, 2, 13, 10, 24, 10, 17, 4, 21, 16, 14, 18, 25, 9, 13, 11, 12, 17, 3, 9, 23, 17, 17, 3, 3, 24, 11, 21, 1, 11, 2, 23, 21, 15, 2, 18, 23, 18, 8, 4, 18, 13, 11, 25, 3, 8, 21, 16, 24, 10, 17, 24, 9, 10, 24, 12, 1, 24, 1, 4, 10, 10, 21, 15, 22, 23, 16, 8, 18, 6, 17, 9, 15, 17, 7, 14, 13, 15, 17, 13, 20, 11, 3, 20, 21, 24, 24, 25, 15, 12, 24, 23, 4, 6, 24, 2, 3, 2, 15, 8, 3, 22, 16, 15, 4, 8, 17, 1, 16, 2, 12, 8, 10, 7, 12, 11, 19, 14, 7, 13, 25, 17, 8, 1, 4, 2, 15, 22, 17, 14, 21, 8, 8, 25, 12, 1, 14, 4, 13, 2, 22, 17, 12, 8, 24, 7, 18, 2, 24, 14, 19, 14, 7, 19, 6, 3, 20, 9, 13, 8, 22, 19, 18, 8, 5, 10, 14, 2, 20, 6, 11, 12, 16, 10, 12, 2, 15, 10, 25, 8, 5, 25, 9, 24, 6, 7, 3, 23, 5, 22, 2, 6, 19, 24, 16, 7, 18, 2, 9, 12, 2, 14, 4, 12, 22, 8, 23, 8, 22, 4, 10, 3, 11, 4, 4, 8, 7, 18, 14, 16, 18, 25, 8, 16, 14, 5, 20, 9, 6, 4, 18, 12, 7, 12, 12, 10, 16, 5, 3, 1, 21, 16, 2, 19, 20, 13, 18, 23, 11, 12, 14, 10, 2, 24, 13, 16, 7, 2, 14, 25, 10, 22, 25, 12, 16, 5, 24, 7, 2, 9, 7, 18, 23, 24, 23, 17, 18, 21, 23, 19, 5, 13, 6, 16, 19, 19, 17, 9, 11}; vector <int> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); int Arr3[] = {7402, 98880, 14118, 27476, 42342, 41825, 59407, 36522, 13061, 5266, 91355, 94393, 11888, 18466, 9703, 11129, 4103, 98800, 84550, 44664, 84095, 78511, 67474, 71487, 78854, 30803, 92696, 29494, 28396, 81811, 6151, 61810, 85315, 6835, 77593, 69397, 22639, 80397, 52536, 68605, 20494, 80252, 86860, 47604, 17828, 35429, 77322, 22768, 65528, 57687, 56005, 12546, 1739, 4468, 55882, 72295, 89037, 89498, 78229, 68738, 6351, 84612, 505, 17399, 76100, 43227, 55631, 60328, 28996, 22040, 90237, 24827, 65315, 83124, 70487, 76640, 62160, 23523, 49516, 63192, 1324, 3771, 40275, 33982, 51857, 30435, 51759, 26089, 35261, 90872, 45119, 13031, 29493, 40818, 49077, 34820, 30515, 7233, 41326, 56088, 87143, 90049, 54299, 37505, 56253, 26998, 99678, 53498, 91168, 25656, 26459, 46381, 76108, 66176, 32163, 73529, 54087, 36818, 35933, 80093, 64468, 82516, 95813, 15021, 9630, 24115, 10395, 2767, 7774, 42758, 87316, 87082, 60893, 20063, 87752, 76658, 73259, 80337, 67074, 45144, 96516, 95979, 27254, 70186, 52550, 91556, 76397, 37664, 94808, 15734, 54922, 88133, 12544, 43295, 36468, 42783, 60737, 21928, 44487, 15821, 10991, 90294, 42796, 99212, 65711, 65044, 60008, 94054, 59206, 25062, 93789, 60678, 85072, 11119, 11328, 66624, 39324, 8453, 17144, 28198, 53217, 88489, 98564, 67180, 8522, 53960, 82715, 39486, 81281, 59147, 46773, 37256, 47635, 63774, 15535, 19799, 7294, 25263, 56993, 92251, 36588, 39654, 47663, 23508, 73732, 6411, 24814, 77168, 64055, 16653, 72523, 20693, 52401, 48061, 2660, 78891, 3780, 92749, 90419, 8065, 61545, 46859, 6946, 86820, 14975, 52427, 58879, 48502, 45138, 3275, 96288, 18642, 49217, 7261, 86526, 68509, 9247, 37129, 71936, 53042, 71268, 1543, 34115, 67881, 35411, 26578, 76604, 36153, 26242, 55996, 11442, 20881, 15950, 56080, 92861, 53536, 10531, 47633, 83770, 73233, 81118, 83903, 67263, 84495, 28925, 48803, 26461, 64200, 13040, 64713, 11403, 80515, 45340, 73463, 91473, 28082, 66340, 87803, 56027, 34627, 59574, 3733, 74404, 54399, 40382, 16483, 59422, 33491, 67523, 94782, 95754, 11074, 73060, 39215, 96217, 8998, 87265, 81076, 35067, 59905, 51040, 68002, 77786, 31192, 58447, 32061, 81638, 18624, 56391, 44607, 80427, 9291, 47387, 30298, 90445, 48848, 94516, 40131, 82470, 92630, 15320, 70123, 56992, 74201, 73317, 58510, 36508, 88304, 32204, 99862, 49716, 57925, 28500, 79464, 27915, 37307, 43512, 55656, 63647, 94258, 14957, 1457, 95811, 15980, 22431, 59941, 83988, 92892, 9138, 70205, 17665, 54552, 64888, 82627, 73277, 60796, 92339, 3292, 83699, 89569, 9827, 88027, 20819, 10705, 9820, 46427, 12256, 92017, 92158, 15582, 18049, 50576, 25692, 21891, 82327, 37933, 60801, 67425, 48497, 33298, 18473, 54735, 84379, 13296, 19243, 836, 6038, 70966, 87252, 87255, 15685, 69998, 71036, 48635, 80086, 43002, 63378, 17307, 71305, 74695, 77654, 15554, 71409, 52431, 47586, 21004, 6905, 17334, 61130, 23637, 27241, 9604, 17503, 45333, 74578, 71141, 8895, 4723, 9358, 47664, 75430, 81260, 57838, 20889, 63248, 63048, 33787, 99051, 31346, 52843, 56971, 1224, 2867, 56016, 45829, 87354, 41040, 82921, 893, 11853, 48793, 66190, 19059, 13787, 44298, 20921, 86710, 1393, 52302, 62544, 91984, 42604, 73067, 43321, 73140, 36672, 47093, 74031, 81016, 14738, 24521, 62322, 78963, 99284, 73206, 23501, 33452, 43973, 18939, 3285, 62689, 76194, 5102, 95030, 9115, 74931, 87337, 36462, 84594, 36186, 41317, 32698, 4336, 7180, 58758, 73578, 77318, 8958, 38117, 93863, 56951, 14761, 42144, 64814, 76180, 8654, 94579, 4986, 95981, 15428, 22726, 56733, 85384, 68632, 21510, 93042, 24665, 68893, 17833, 96689, 81301, 79264, 51636, 90576, 50522, 8384, 62066, 94284, 78984, 45576, 73478, 37434, 1116, 34804, 16731, 75402, 13091, 6499, 96335, 27242, 89183, 27791, 23478, 89377, 9396, 82561, 78805, 71653, 15817, 52974, 47055, 54838, 48050, 43785, 78249, 80422, 25350, 69724, 77098, 54781, 44771, 14618, 3644, 80359, 50641, 68703, 83887, 16407, 1130, 57664, 79217, 21199, 12407, 93486, 47979, 36285, 105, 3035, 51312, 41438, 61291, 25585, 8655, 36379, 48083, 15107, 95891, 92187, 76336, 37143, 1083, 61485, 89467, 13485, 9098, 42078, 58529, 40611, 77140, 53627, 45075, 89967, 88311, 11293, 83091, 89702, 29794, 63964, 50494, 88309, 36094, 7730, 99185, 10916, 65991, 87743, 95563, 38581, 44485, 63383, 90720, 69932, 97942, 32861, 91156, 62925, 42032, 93964, 36913, 2171, 47760, 57561, 14441, 94494, 10993, 29826, 36277, 61817, 85345, 37834, 8781, 76386, 7147, 91218, 82731, 68605, 44452, 50055, 39452, 32348, 39599, 5940, 7475, 56657, 86864, 79407, 31351, 26078, 93046, 92427, 25316, 54680, 9586, 89641, 39863, 50889, 99883, 56320, 49122, 51809, 14981, 14715, 31059, 16556, 94602, 73558, 61063, 28401, 88780, 57863, 72405, 25131, 7890, 58061, 54318, 56068, 55880, 8635, 60135, 52522, 82853, 37020, 83920, 96260, 8846, 13466, 34483, 77649, 20788, 81872, 90410, 51682, 29057, 60306, 58932, 25944, 88925, 67978, 84974, 49838, 45399, 62870, 64649, 19023, 47553, 61077, 9726, 63021, 437, 55048, 86290, 47312, 78970, 53545, 11820, 94024, 18987, 31026, 40339, 7415, 25656, 98511, 95062, 81875, 99007, 91662, 22150, 71045, 70114, 14880, 37679, 6900, 69733, 82665, 22877, 77288, 13776, 61304, 89943, 99398, 86972, 35125, 92444, 65023, 37424, 2158, 90292, 81243, 60493, 43939, 99748, 87268, 50523, 13554, 63647, 94689, 33416, 44678, 66248, 74275, 61897, 2449, 90577, 97689, 58534, 74450, 74129, 37147, 29181, 36895, 60994, 30021, 41488, 27298, 75199, 28796, 69449, 10473, 51050, 79518, 45716, 39675, 51696, 4020, 38462, 88956, 86900, 2699, 79096, 66567, 5181, 45510, 10937, 12257, 84014, 79094, 7206, 33775, 74684, 47574, 19279, 49702, 75698, 3571, 63124, 76932, 10273, 74377, 33183, 31672, 69510, 45942, 48693, 2795, 53225, 34505, 87534, 5674, 95225, 32172, 47160, 33345, 98964, 38630, 91025, 89870, 33040, 26459, 92129, 18263, 43942, 32089, 72918, 22122, 35675, 18508, 62736, 26310, 42634, 19165, 50371, 27605, 83051, 45275, 99977, 51171, 25816, 20878, 23736, 53016, 33214, 1488, 64096, 92305, 56302, 33062, 32282, 40449, 58179, 18248, 77982, 96347, 23312, 76551, 27732, 38962, 78363, 13988, 26464, 69608, 1637, 56251, 48060, 76898, 34276, 47105, 6455, 97225, 26778, 70899, 98950, 42998, 59153, 24558, 47842, 29503, 62235, 40320, 75358, 49362, 41183, 45718, 50069, 20996, 60102, 41951, 80589, 74288, 89028, 85778, 4311, 32881, 41163, 73460, 25303, 8059, 39279, 48022, 96178, 34157, 45638, 83237, 13892, 49702, 69538, 39239, 8859, 62234, 30768, 35553, 50633, 27784, 5796, 47581, 71643, 28446, 16401, 2202, 23041, 43285, 37773, 27179, 23715, 79036, 4752, 97400, 44855, 57583, 80897, 18782, 88181, 47172, 25520, 97752, 66065, 73626, 48585, 60752, 76206, 56517, 82512, 14086, 82412, 83306, 23517, 69679, 66227, 61931, 2967, 6939, 1774, 79107, 41554, 94940, 28125, 37822, 15744, 62497, 49872, 53058, 26980, 76476, 87309, 49715, 9540, 70796, 22701, 31047, 42742, 60104, 48614, 69571, 47318, 72961, 18127, 15537, 44363, 49646, 24943, 20414, 38118, 69303, 4058, 34737, 51189, 178, 40572, 60801, 92412, 5045, 5612, 21267, 73649, 81698, 4041, 44701, 12186, 75501, 18716, 68369, 60199, 67503, 70561, 17301, 91916, 17483, 82537, 36714, 52625, 26578, 38835, 32317, 31613, 78741, 68192, 9843, 63370, 24297, 52247, 1336, 88100, 82245, 66135, 21299, 13560, 60715, 99315, 10741, 15709, 27077, 79658, 1484, 95404, 775, 33342, 66770, 72549, 92758, 56925, 17302, 47637, 75703, 56188, 54252, 93540, 38797, 18959, 2630, 57676, 59901, 36073, 19567, 56361, 16249, 65997, 2651, 29163, 52630, 54349, 13380, 91508, 33098, 69654, 80125, 78570, 18784, 1152, 53690, 12613, 40244, 83299, 56606, 49532, 68044, 64862, 94750, 68205, 29901, 28070, 86695, 58582, 76717, 85280, 12392, 41091, 63202, 36956, 88334, 10965, 81557, 65469, 41318, 46518, 68803, 64364, 77220, 50188, 99851, 62151, 24893, 5290, 79287, 93590, 78371, 30006, 55093, 99606, 62993, 93017, 97170, 99617, 12889, 22476, 12514, 76980, 68450, 91670, 7287, 49667, 82978, 791, 53781, 63934, 67650, 94595, 77380, 48924, 35732, 73719, 4544, 40199, 46083, 63851, 87059, 12079, 74390, 46035, 13911, 80519, 28904, 71720, 60739, 67554, 58860, 80382, 32412, 66850, 60754, 24644, 85128, 40900, 28763, 52049, 17652, 99863, 99302, 93459, 81692, 12036, 39725, 8105, 61425, 95977, 31162, 35277, 72151, 44257, 95504, 2649, 28098, 28863, 16520, 41249, 29362, 38235, 5122, 57067}; vector <int> Arg3(Arr3, Arr3 + (sizeof(Arr3) / sizeof(Arr3[0]))); int Arg4 = 431; long long Arg5 = -42924334LL; verify_case(4, Arg5, findMin(Arg0, Arg1, Arg2, Arg3, Arg4)); }

// END CUT HERE

};

// BEGIN CUT HERE
    int main() {
        NegativeGraphDiv2 ___test;
        ___test.run_test(-1);
       int X ;
       scanf("%d",&X) ;
    }
// END CUT HERE
